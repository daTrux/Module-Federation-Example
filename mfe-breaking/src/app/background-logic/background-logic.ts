// For remotes that needs to expose a logic (without frontend)
import { CoreUiSdk } from '@fts/coreui-sdk';
import { CoreUiMessage } from '@fts/coreui-sdk/dist/types/model';

/**
 * The background logic entry method parameters depend on the specific plugin that is currently loading it.
 * In the plugin registry configuration you can specify the element name of the microfrontend that should load your logic.
 * Otherwise, if `"loader"` is empty or equal to `"coreui-shell"`, the background logic will be loaded by the coreui-shell.
 *
 * If the logic is loaded by the coreui-shell, then it will just receive a single parameter, the `"childMfeUniqueId"`.
 * In this first case, use the following logic entry method callback:
 *
 * `export default async (childMfeUniqueId: string): Promise<void> => { ... }`
 *
 * If the logic is loaded by another plugin, then it will receive an object containing the `"childMfeUniqueId"`
 * and some additional data provided by that plugin.
 * In this second case, use the following logic entry method callback:
 *
 * `export default async ({childMfeUniqueId, ...rest}: any): Promise<void> => { ... }`
 */
export default async ({childMfeUniqueId, ...rest}: any): Promise<void> => {

  const coreUiSdk: CoreUiSdk = new CoreUiSdk();

  // Unique channel initialization.
  // Provide as arguments:
  //  - the channel name generated by the Coreui Shell,
  //  - a callback function for PubSub message handling and
  //  - an optional callback function for Direct message handling
  await coreUiSdk.init(childMfeUniqueId, handlePubMessage.bind(this), handleDirectMessage.bind(this));

  // Add your background-logic here (e.g. subscription to specific subjects)

};

function handlePubMessage(message: CoreUiMessage): void {
  // Add your generic logic to handle message received (e.g. broadcast message)
}

function handleDirectMessage(message: CoreUiMessage): Promise<CoreUiMessage | void> {
  // Add your generic logic to handle direct message received

  return new Promise<CoreUiMessage | void>(res => {
    res({
      ...message,
      payload: 'response',
      isResponse: true
    } as CoreUiMessage);
  });
}
